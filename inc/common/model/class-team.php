<?php


namespace KitchenRun\Inc\Common\Model;

/**
 * Class Team
 *
 * Model of a Team that is saved in the Database or newly created. A Team are one or two people who cook or are guests
 * in a course during the Kitchen Run Event.
 *
 * @since       1.0.0
 * @package     KitchenRun\Inc\Common\Model
 * @author      Niklas Loos <niklas.loos@live.com>
 */
class Team
{
    /**
     * Name of the Database Table that is used to save the teams.
     *
     * @since   1.0.0
     * @var     string  TABLE_NAME
     */
    const TABLE_NAME = "kr_team";

    /**
     * ID of the Team. Autogenerated by the DB.
     *
     * @since   1.0.0
     * @access  private
     * @var     int $id
     */
    private $id;

    /**
     * ID of the Event in which the team is participating.
     *
     * @since   1.0.0
     * @access  private
     * @var     int $event
     */
    private $event;

    /**
     * Name of the Team. Can be everything :D
     *
     * @since   1.0.0
     * @access  private
     * @var     string  $name
     */
    private $name;

    /**
     * Name of the first participant in the team. Is mandatory for a team.
     *
     * @since   1.0.0
     * @access  private
     * @var     string  $member1
     */
    private $member1;

    /**
     * Name of the second participant in the team. Is optional for a team.
     *
     * @since   1.0.0
     * @access  private
     * @var     string  $member2
     */
    private $member2;

    /**
     * E-Mail of the Team. All Important Information are send to this mail.
     *
     * @since   1.0.0
     * @access  private
     * @var     string  $email
     */
    private $email;

    /**
     * Address where the team is cooking one of the courses.
     *
     * @since   1.0.0
     * @access  private
     * @var     string  $address
     */
    private $address;

    /**
     * City of the address. Normally Ilmenau.
     *
     * @since   1.0.0
     * @access  private
     * @var     string  $city
     */
    private $city;

    /**
     * Phone Number on which the team is always reachable. For really important and fast information.
     *
     * @since   1.0.0
     * @access  private
     * @var     string  $phone
     */
    private $phone;

    /**
     * One of the Food Preferences of the Team.
     * If one or both of the participants is vegan. Either as information for the pairing process or as information
     * for the cooking team.
     * '0' -> not vegan
     * '1' -> vegan
     *
     * @since   1.0.0
     * @access  private
     * @var     int $vegan
     */
    private $vegan;

    /**
     * One of the Food Preferences of the Team.
     * If one or both of the participants is vegetarian. Either as information for the pairing process or as information
     * for the cooking team.
     * '0' -> not vegetarian
     * '1' -> vegetarian
     *
     * @since   1.0.0
     * @access  private
     * @var     int $vegetarian
     */
    private $vegetarian;

    /**
     * One of the Food Preferences of the Team.
     * If one or both of the participants is eating halal. Either as information for the pairing process or as information
     * for the cooking team.
     * '0' -> not halal
     * '1' -> halal
     *
     * @since   1.0.0
     * @access  private
     * @var     int $halal
     */
    private $halal;

    /**
     * One of the Food Preferences of the Team.
     * If one or both of the participants is eating kosher. Either as information for the pairing process or as information
     * for the cooking team.
     * '0' -> not kosher
     * '1' -> kosher
     *
     * @since   1.0.0
     * @access  private
     * @var     int $kosher
     */
    private $kosher;

    /**
     * General comment of the team for what food they don't want or want to eat. Also important for allergies.
     * This Information will be send to the cooking team.
     *
     * @since   1.0.0
     * @access  private
     * @var     string  $food_request
     */
    private $food_request;

    /**
     * General comment of the team on where to find their apartment or home.
     * This Information will be send to the guest teams.
     *
     * @since   1.0.0
     * @access  private
     * @var     string  $find_place
     */
    private $find_place;

    /**
     * General comment of the event or god and the world :D
     *
     * @since   1.0.0
     * @access  private
     * @var     string  $comments
     */
    private $comments;

    /**
     * One of the Course Preferences of the Team.
     * If the team doesn't really want to cook the appetizer. Just a preference, doesn't mean they don't have to.
     * '0' -> prefer not to cook the appetizer
     * '1' -> would cook appetizer
     *
     * @since   1.0.0
     * @access  private
     * @var     int $appetizer
     */
    private $appetizer;

    /**
     * One of the Course Preferences of the Team.
     * If the team doesn't really want to cook the main course. Just a preference, doesn't mean they don't have to.
     * '0' -> prefer not to cook the main course
     * '1' -> would cook main course
     *
     * @since   1.0.0
     * @access  private
     * @var     int $main_course
     */
    private $main_course;

    /**
     * One of the Course Preferences of the Team.
     * If the team doesn't really want to cook the dessert. Just a preference, doesn't mean they don't have to.
     * '0' -> prefer not to cook the dessert
     * '1' -> would cook dessert
     *
     * @since   1.0.0
     * @access  private
     * @var     int $dessert
     */
    private $dessert;

    /**
     * Information about the role of the team. If it is a dummy team, then it was created to fill the algorithm.
     * Those teams have to be filled until the start of the event. NOT IN DATABASE YET.
     *
     * @TODO    save dummy information in database
     * @since   1.0.0
     * @access  private
     * @var     bool    $dummy
     */
    private $dummy = false;


    /**
     * Get Team ID.
     *
     * @since   1.0.0
     * @return  int
     */
    public function getId(){ return $this->id; }

    /**
     * Get the Event in which the team is participating.
     *
     * @since   1.0.0
     * @return  Event   Event Object of the participating Event
     */
    public function getEvent() {
        return Event::findbyId($this->event);
    }

    /**
     * Set the Event in which the team is participating.
     *
     * @since   1.0.0
     * @access  private
     * @param   Event   $event  Event Object of the participating Event
     */
    public function setEvent($event) {
        if ($event instanceof Event) {
            $this->event = $event->getId();
        }
    }

    /**
     * Get the Name of the Team.
     *
     * @since   1.0.0
     * @return  string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set the Name of the Team.
     *
     * @since   1.0.0
     * @param   string  $name
     */
    public function setName($name)
    {
        $this->name = $name;
    }

    /**
     * Get the Name of the first participant in the team.
     *
     * @since   1.0.0
     * @return  string
     */
    public function getMember1()
    {
        return $this->member1;
    }

    /**
     * Set the Name of the first participant in the team.
     *
     * @since   1.0.0
     * @param   string  $member1
     */
    public function setMember1($member1)
    {
        $this->member1 = $member1;
    }

    /**
     * Get the Name of the second participant in the team. Could be an empty string, then there is only one member.
     *
     * @since   1.0.0
     * @return  string
     */
    public function getMember2()
    {
        return $this->member2;
    }

    /**
     * Set the Name of the second participant in the team. Is optional.
     *
     * @since   1.0.0
     * @param   string  $member2
     */
    public function setMember2($member2)
    {
        $this->member2 = $member2;
    }

    /**
     * Get the E-Mail of the Team. All Important Information are send to this mail.
     *
     * @since   1.0.0
     * @return  string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set the E-Mail of the Team. All Important Information are send to this mail.
     *
     * @since   1.0.0
     * @param   string  $email
     */
    public function setEmail($email)
    {
        $this->email = $email;
    }

    /**
     * Get the Address where the team is cooking one of the courses.
     *
     * @since   1.0.0
     * @return  string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * Set the Address where the team is cooking one of the courses.
     *
     * @since   1.0.0
     * @param   string  $address
     */
    public function setAddress($address)
    {
        $this->address = $address;
    }

    /**
     * Get City of the address. Normally Ilmenau.
     *
     * @since   1.0.0
     * @return  string
     */
    public function getCity()
    {
        return $this->city;
    }

    /**
     * Set City of the address. Normally Ilmenau.
     *
     * @since   1.0.0
     * @param   string  $city
     */
    public function setCity($city)
    {
        $this->city = $city;
    }

    /**
     * Get the Phone Number on which the team is always reachable. For really important and fast information.
     *
     * @since   1.0.0
     * @return  string
     */
    public function getPhone()
    {
        return $this->phone;
    }

    /**
     * Set the Phone Number on which the team is always reachable. For really important and fast information.
     *
     * @since   1.0.0
     * @param   string  $phone
     */
    public function setPhone($phone)
    {
        $this->phone = $phone;
    }

    /**
     * Get One of the Food Preferences of the Team.
     * If one or both of the participants is vegan. Either as information for the pairing process or as information
     * for the cooking team.
     * '0' -> not vegan
     * '1' -> vegan
     *
     * @since   1.0.0
     * @return  int
     */
    public function getVegan()
    {
        return $this->vegan;
    }

    /**
     * Set One of the Food Preferences of the Team.
     * If one or both of the participants is vegan. Either as information for the pairing process or as information
     * for the cooking team.
     * '0' -> not vegan
     * '1' -> vegan
     *
     * @since   1.0.0
     * @param   int $vegan
     */
    public function setVegan($vegan)
    {
        $this->vegan = $vegan;
    }

    /**
     * Get One of the Food Preferences of the Team.
     * If one or both of the participants is vegetarian. Either as information for the pairing process or as information
     * for the cooking team.
     * '0' -> not vegetarian
     * '1' -> vegetarian
     *
     * @since   1.0.0
     * @return  int
     */
    public function getVegetarian()
    {
        return $this->vegetarian;
    }

    /**
     * Set One of the Food Preferences of the Team.
     * If one or both of the participants is vegetarian. Either as information for the pairing process or as information
     * for the cooking team.
     * '0' -> not vegetarian
     * '1' -> vegetarian
     *
     * @since   1.0.0
     * @param   int $vegetarian
     */
    public function setVegetarian($vegetarian)
    {
        $this->vegetarian = $vegetarian;
    }

    /**
     * Get One of the Food Preferences of the Team.
     * If one or both of the participants is eating halal. Either as information for the pairing process or as information
     * for the cooking team.
     * '0' -> not eating halal
     * '1' -> eating halal
     *
     * @since   1.0.0
     * @return  int
     */
    public function getHalal()
    {
        return $this->halal;
    }

    /**
     * Set One of the Food Preferences of the Team.
     * If one or both of the participants is eating halal. Either as information for the pairing process or as information
     * for the cooking team.
     * '0' -> not eating halal
     * '1' -> eating halal
     *
     * @since   1.0.0
     * @param   int $halal
     */
    public function setHalal($halal)
    {
        $this->halal = $halal;
    }

    /**
     * Get One of the Food Preferences of the Team.
     * If one or both of the participants is eating kosher. Either as information for the pairing process or as information
     * for the cooking team.
     * '0' -> not eating kosher
     * '1' -> eating kosher
     *
     * @since   1.0.0
     * @return  int
     */
    public function getKosher()
    {
        return $this->kosher;
    }

    /**
     * Set One of the Food Preferences of the Team.
     * If one or both of the participants is eating kosher. Either as information for the pairing process or as information
     * for the cooking team.
     * '0' -> not eating kosher
     * '1' -> eating kosher
     *
     * @since   1.0.0
     * @param   int $kosher
     */
    public function setKosher($kosher)
    {
        $this->kosher = $kosher;
    }

    /**
     * Get the General comment of the team for what food they don't want or want to eat. Also important for allergies.
     * This Information will be send to the cooking team.
     *
     * @since   1.0.0
     * @return  string
     */
    public function getFoodRequest()
    {
        return $this->food_request;
    }

    /**
     * Set the General comment of the team for what food they don't want or want to eat. Also important for allergies.
     * This Information will be send to the cooking team.
     *
     * @since   1.0.0
     * @param   string  $food_request
     */
    public function setFoodRequest($food_request)
    {
        $this->food_request = $food_request;
    }

    /**
     * Get the General comment of the team on where to find their apartment or home.
     * This Information will be send to the guest teams.
     *
     * @since   1.0.0
     * @return  string
     */
    public function getFindPlace()
    {
        return $this->find_place;
    }

    /**
     * Set the General comment of the team on where to find their apartment or home.
     * This Information will be send to the guest teams.
     *
     * @since   1.0.0
     * @param   string  $find_place
     */
    public function setFindPlace($find_place)
    {
        $this->find_place = $find_place;
    }

    /**
     * Get the General comment of the event or god and the world :D
     *
     * @since   1.0.0
     * @return  string
     */
    public function getComments()
    {
        return $this->comments;
    }

    /**
     * Set the General comment of the event or god and the world :D
     *
     * @since   1.0.0
     * @param   string  $comments
     */
    public function setComments($comments)
    {
        $this->comments = $comments;
    }

    /**
     * Get one of the Course Preferences of the Team.
     * If the team doesn't really want to cook the appetizer. Just a preference, doesn't mean they don't have to.
     * '0' -> prefer not to cook the appetizer
     * '1' -> would cook appetizer
     *
     * @since   1.0.0
     * @return  int
     */
    public function getAppetizer()
    {
        return $this->appetizer;
    }

    /**
     * Set one of the Course Preferences of the Team.
     * If the team doesn't really want to cook the appetizer. Just a preference, doesn't mean they don't have to.
     * '0' -> prefer not to cook the appetizer
     * '1' -> would cook appetizer
     *
     * @since   1.0.0
     * @param   int $appetizer
     */
    public function setAppetizer($appetizer)
    {
        $this->appetizer = $appetizer;
    }

    /**
     * Get one of the Course Preferences of the Team.
     * If the team doesn't really want to cook the main course. Just a preference, doesn't mean they don't have to.
     * '0' -> prefer not to cook the main course
     * '1' -> would cook main course
     *
     * @since   1.0.0
     * @return  int
     */
    public function getMainCourse()
    {
        return $this->main_course;
    }

    /**
     * Set one of the Course Preferences of the Team.
     * If the team doesn't really want to cook the main course. Just a preference, doesn't mean they don't have to.
     * '0' -> prefer not to cook the main course
     * '1' -> would cook main course
     *
     * @since   1.0.0
     * @param   int $main_course
     */
    public function setMainCourse($main_course)
    {
        $this->main_course = $main_course;
    }

    /**
     * Get one of the Course Preferences of the Team.
     * If the team doesn't really want to cook the dessert. Just a preference, doesn't mean they don't have to.
     * '0' -> prefer not to cook the dessert
     * '1' -> would cook dessert
     *
     * @since   1.0.0
     * @return  int
     */
    public function getDessert()
    {
        return $this->dessert;
    }

    /**
     * Set one of the Course Preferences of the Team.
     * If the team doesn't really want to cook the dessert. Just a preference, doesn't mean they don't have to.
     * '0' -> prefer not to cook the dessert
     * '1' -> would cook dessert
     *
     * @since   1.0.0
     * @param   int $dessert
     */
    public function setDessert($dessert)
    {
        $this->dessert = $dessert;
    }



    /**
     * Find a list of Teams in the Database through the event, where they participate.
     *
     * @since   1.0.0
     * @param   Event   $event  Event Object
     * @return  Team[]  $teams  Array of Team Objects
     */
    static function findByEvent($event) {
        $id = $event->getId();

        global $wpdb;

        $table = self::TABLE_NAME;
        $databaseName =  DB_NAME;
        $prefix = $wpdb->prefix;

        // sql query find row with id
        $sql = "
            SELECT * FROM $databaseName.$prefix$table WHERE event='$id';
        ";

        $results = $wpdb->get_results($sql); // execute sql query

        $teams = array();

        foreach ($results as $row) {
            $team = new team();
            //create team object
            $team->id = $row->id;
            $team->setName($row->name);
            $team->setMember1($row->member1);
            $team->setMember2($row->member2);
            $team->setAddress($row->address);
            $team->setCity($row->city);
            $team->setPhone($row->telephone);
            $team->setEmail($row->email);
            $team->setVegan($row->vegan);
            $team->setVegetarian($row->vegetarian);
            $team->setHalal($row->halal);
            $team->setKosher($row->kosher);
            $team->setFoodRequest($row->food_requests);
            $team->setFindPlace($row->find_place);
            $team->setAppetizer($row->appetizer);
            $team->setMainCourse($row->main_course);
            $team->setDessert($row->dessert);
            $team->setComments($row->comments);
            $team->event = $row->event;

            $teams[] = $team;
        }


        return $teams;

    }

    /**
     * Find a Team in the Database through the id.
     *
     * @since   1.0.0
     * @param   int     $id     Team ID
     * @return  Team    $team   Team Object
     */
    static function findById($id) {

        global $wpdb;

        $table = self::TABLE_NAME;
        $databaseName =  DB_NAME;
        $prefix = $wpdb->prefix;

        // sql query find row with id
        $sql = "
            SELECT * FROM $databaseName.$prefix$table WHERE id='$id';
        ";

        $team = new team();

        $row = $wpdb->get_row($sql); // execute sql query

        //create team object
        $team->id = $row->id;
        $team->setName($row->name);
        $team->setMember1($row->member1);
        $team->setMember2($row->member2);
        $team->setAddress($row->address);
        $team->setCity($row->city);
        $team->setPhone($row->telephone);
        $team->setEmail($row->email);
        $team->setVegan($row->vegan);
        $team->setVegetarian($row->vegetarian);
        $team->setHalal($row->halal);
        $team->setKosher($row->kosher);
        $team->setFoodRequest($row->food_requests);
        $team->setFindPlace($row->find_place);
        $team->setAppetizer($row->appetizer);
        $team->setMainCourse($row->main_course);
        $team->setDessert($row->dessert);
        $team->setComments($row->comments);
        $team->event = $row->event;


        return $team;
    }

    /**
     * Find all teams in database and save them in a list.
     *
     * @return Team[]   $teams  Array of Team Objects
     */
    static function findAll() {
        global $wpdb;

        $table = self::TABLE_NAME;
        $databaseName =  DB_NAME;
        $prefix = $wpdb->prefix;

        // sql query
        $sql = "
            SELECT * FROM $databaseName.$prefix$table ;
        ";

        $results = $wpdb->get_results($sql); // execute sql query

        $teams = array();

        // create each team object
        foreach ($results as $row) {
            $team = new team();
            $team->id = $row->id;
            $team->setName($row->name);
            $team->setMember1($row->member1);
            $team->setMember2($row->member2);
            $team->setAddress($row->address);
            $team->setCity($row->city);
            $team->setPhone($row->telephone);
            $team->setEmail($row->email);
            $team->setVegan($row->vegan);
            $team->setVegetarian($row->vegetarian);
            $team->setHalal($row->halal);
            $team->setKosher($row->kosher);
            $team->setFoodRequest($row->food_requests);
            $team->setFindPlace($row->find_place);
            $team->setAppetizer($row->appetizer);
            $team->setMainCourse($row->main_course);
            $team->setDessert($row->dessert);
            $team->setComments($row->comments);
            $team->event = $row->event;

            $teams[] = $team;

        }

        return $teams;
    }

    /**
     * Saves object in database table
     *
     * @since 1.0.0
     */
    public function save() {
        global $wpdb;

        // wp_kr_team
        $table_name = $wpdb->prefix . Database::DB_TEAM_NAME;

        $col = array(
            'name' => $this->getName(),
            'member1' => $this->getMember1(),
            'member2' => $this->getMember2(),
            'address' => $this->getAddress(),
            'city' => $this->getCity(),
            'telephone' => $this->getPhone(),
            'email' => $this->getEmail(),
            'vegan' => $this->getVegan(),
            'vegetarian' => $this->getVegetarian(),
            'halal' => $this->getHalal(),
            'kosher' => $this->getKosher(),
            'food_requests' => $this->getFoodRequest(),
            'find_place' => $this->getFindPlace(),
            'appetizer' => $this->getAppetizer(),
            'main_course' => $this->getMainCourse(),
            'dessert' => $this->getDessert(),
            'comments' => $this->getComments(),
            'event' => $this->event,
        );

        // Format of each column (%s = String, %d = Number)
        $format = array(
            '%s',
            '%s',
            '%s',
            '%s',
            '%s',
            '%s',
            '%s',
            '%d',
            '%d',
            '%d',
            '%d',
            '%s',
            '%s',
            '%d',
            '%d',
            '%d',
            '%s',
            '%d',
        );

        if ($this->id !== NULL) { // is id already set
            $col['id'] = $this->id;
            $format[] = '%d';

            $wpdb->replace($table_name, $col, $format);

        } else {

            // save team in database
            $wpdb->insert(
                $table_name,
                $col,
                $format
            );
        }

    }

    /**
     * Deletes object from database.
     *
     * @since 1.0.0
     */
    public function delete()
    {
        global $wpdb;
        $table_name = $wpdb->prefix . Database::DB_TEAM_NAME;

        $wpdb->delete( $table_name, array( 'id' => $this->id ) );
    }

}